import { EFixtureStatus, IFixture, IFollowJob } from '@app/interfaces';
import { FixtureRepository } from '@app/repositories';
import { Processor, Process, OnQueueCompleted } from '@nestjs/bull';
import { Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Job } from 'bull';
import { format } from 'date-fns';
import { toZonedTime } from 'date-fns-tz';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import { ApiFootballService } from './apiFootball.service';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { MESSAGE_NOTIFY_SEPARATOR } from '@app/const';

@Processor('remind')
export class RemindQueueConsumerService {
  constructor(
    @InjectBot() private bot: Telegraf<Context>,
    private readonly repository: FixtureRepository,
    private readonly configService: ConfigService,
    private readonly footballService: ApiFootballService,
  ) {}

  private readonly logger = new Logger(RemindQueueConsumerService.name);

  getIsNeedNotify(status: EFixtureStatus): boolean {
    if (
      [EFixtureStatus.TBD, EFixtureStatus.NS, EFixtureStatus.PST, EFixtureStatus.CANC, EFixtureStatus.ABD].includes(
        status,
      )
    ) {
      return true;
    }

    return false;
  }

  getMessageData(
    fixture: IFixture,
    homeTeam: string,
    awayTeam: string,
  ): { text: string; buttons: InlineKeyboardButton[][] } {
    const path = this.configService.get<string>('BOT_API_URL');
    const zonedDate = toZonedTime(fixture.date, 'Europe/Kiev');
    let text = '';
    let buttons: InlineKeyboardButton[][] = [[]];

    switch (fixture.status.short) {
      // Scheduled
      case EFixtureStatus.TBD:
      case EFixtureStatus.NS: {
        text = `${MESSAGE_NOTIFY_SEPARATOR}–ó–≤—ñ—Ç—É—é! –§—É—Ç–±–æ–ª—å–Ω–∏–π –º–∞—Ç—á <b>${homeTeam}</b> ‚öîÔ∏è <b>${awayTeam}</b> —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –∑–∞ <b>10 —Ö–≤–∏–ª–∏–Ω!</b> ‚öΩÔ∏èüéâ\n–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –∑–∞—Ö–æ–ø–ª—é—é—á–æ–≥–æ –ø–æ—î–¥–∏–Ω–∫—É —Ç–∞ –≥–æ—Ç—É–π—Ç–µ—Å—è –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É! üôå\n–ú–∞—á—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –æ <b>${format(zonedDate, 'HH:mm')} (–ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å)</b>\n–ù–µ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å –∂–æ–¥–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ! –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –º–∞—Ç—á–µ–º —Ç–∞ –Ω–∞—à–∏–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è –Ω–∞–π—Å–≤—ñ–∂—ñ—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. üì¢üí¨üëá`;
        buttons = [[Markup.button.webApp('üî¥ –û–Ω–ª–∞–π–Ω —Ç–µ–∫—Å—Ç–æ–≤–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—è', `${path}/widgets/game/${fixture.id}`)]];
        break;
      }

      // Postponed
      case EFixtureStatus.PST: {
        text = `${MESSAGE_NOTIFY_SEPARATOR}üö´‚ùóÔ∏è –ú–∏ –º–∞—î–º–æ –≤–∞–∂–ª–∏–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: —Ñ—É—Ç–±–æ–ª—å–Ω–∏–π –º–∞—Ç—á <b>${homeTeam}</b> ‚öîÔ∏è <b>${awayTeam}</b>, –±—É–≤ <b>–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–π</b> –Ω–∞ –Ω–æ–≤—É –¥–∞—Ç—É. –¶–µ –º–æ–∂–ª–∏–≤–æ –∑—Ä–æ–±–ª–µ–Ω–æ –∑ –º–µ—Ç–æ—é –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∫—Ä–∞—â–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É –¥–ª—è –≤–∞—Å —Ç–∞ —ñ–Ω—à–∏—Ö —É–±–æ–ª—ñ–≤–∞–ª—å–Ω–∏–∫—ñ–≤.üö´‚ùóÔ∏è`;
        break;
      }

      // Cancelled
      case EFixtureStatus.CANC: {
        text = `${MESSAGE_NOTIFY_SEPARATOR}–óüö´‚ùóÔ∏è –≤–µ–ª–∏–∫–∏–º —Å—É–º–æ–º –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ñ—É—Ç–±–æ–ª—å–Ω–∏–π –º–∞—Ç—á <b>${homeTeam}</b> ‚öîÔ∏è <b>${awayTeam}</b> –±—É–≤ <b>—Å–∫–∞—Å–æ–≤–∞–Ω–∏–π</b> –∑ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω. –í–∏–±–∞—á—Ç–µ –∑–∞ –±—É–¥—å-—è–∫—ñ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ, —è–∫—ñ —Ü–µ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏üö´‚ùóÔ∏è`;
        break;
      }

      // Abandoned
      case EFixtureStatus.ABD: {
        text = `${MESSAGE_NOTIFY_SEPARATOR}üö´‚ùóÔ∏è –ú–∏ –º–∞—î–º–æ –≤–∞–∂–ª–∏–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: —Ñ—É—Ç–±–æ–ª—å–Ω–∏–π –º–∞—Ç—á <b>${homeTeam}</b> ‚öîÔ∏è <b>${awayTeam}</b>, –±—É–≤ <b>—Å–∫–∞—Å–æ–≤–∞–Ω–∏–π</b> –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω, —Ç–∞–∫–∏—Ö —è–∫ –ø–æ–≥–∞–Ω–∞ –ø–æ–≥–æ–¥–∞, –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏, –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è–º –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π —Å–∫–ª–∞–¥ –≥—Ä–∞–≤—Ü—ñ–≤ —á–∏ –∞—Ä–±—ñ—Ç—Ä—ñ–≤.üö´‚ùóÔ∏è\n üïµÔ∏è‚Äç‚ôÇÔ∏èüí° <b>–©–æ –¥–∞–ª—ñ?</b> üí°üïµÔ∏è‚Äç‚ôÇÔ∏è –ß–∏ –±—É–¥–µ –º–∞—Ç—á <b>–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–π</b> –Ω–∞ –Ω–æ–≤—É –¥–∞—Ç—É, –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª —Ç–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ñ–≤ –∑–º–∞–≥–∞–Ω–Ω—è.`;
        break;
      }

      default:
        break;
    }

    return { text, buttons };
  }

  @Process()
  async process({ data }: Job<IFollowJob>) {
    const { id } = data;
    const userFixture = await this.repository.findOne({
      where: { id },
      relations: { users: true },
      select: { id: true, users: { telegramId: true } },
    });

    if (!userFixture) {
      return {};
    }

    if (!userFixture.users.length) {
      return {
        id,
      };
    }

    const { fixture, teams } = await this.footballService.findFixture(id);

    if (!this.getIsNeedNotify(fixture.status.short)) {
      return {
        id,
      };
    }

    const msgPromises = [];
    const { text, buttons } = this.getMessageData(fixture, teams.home.name, teams.away.name);

    for (const { telegramId } of userFixture.users) {
      msgPromises.push(
        this.bot.telegram.sendMessage(telegramId, text, {
          parse_mode: 'HTML',
          reply_markup: { inline_keyboard: buttons },
        }),
      );
    }

    await Promise.all(msgPromises);

    return { id };
  }

  @OnQueueCompleted()
  async complete({ data }: Job<IFollowJob>) {
    const { id } = data;

    this.logger.log(`Fixture ${id} delete afte job complete`);

    try {
      await this.repository.delete(id);
    } catch (error) {
      this.logger.warn(`Can't delete fixture ${id}`);
    }
  }
}
