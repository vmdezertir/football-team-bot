import { Injectable, Logger } from '@nestjs/common';
import { Scene, SceneEnter, Ctx, Action } from 'nestjs-telegraf';
import { EScenes } from '@app/enums';
import { getAnswer, getCountriesButtons, getLeagueButtons, getTeamButtons, getUserId } from '@app/utils';
import { Markup } from 'telegraf';
import { ApiFootballService } from '@app/services/apiFootball.service';
import { ITeam } from '@app/interfaces/team';
import { Scenes } from '@app/@types/custom';
import { ILeague } from '@app/interfaces';
import { FavoriteRepository } from '@app/repositories';
import { error } from 'console';

interface SceneData {
  teams?: ITeam[];
  team?: ITeam | null;
  country?: string;
  leagues?: ILeague[];
  league?: number;
}

type SceneCtx = Scenes.SContext<SceneData>;

@Injectable()
@Scene(EScenes.ADD_TEAM)
export class AddTeamScene {
  constructor(
    private readonly footballService: ApiFootballService,
    private readonly repository: FavoriteRepository,
  ) {}

  private readonly logger = new Logger(AddTeamScene.name);

  @SceneEnter()
  async start(@Ctx() ctx: SceneCtx) {
    const menu = Markup.inlineKeyboard(getCountriesButtons());
    await ctx.replyWithHTML(
      '–ó–∞–ø—Ä–æ—à—É—é —Ç–µ–±–µ –Ω–∞ –∑–∞—Ö–æ–ø–ª—é—é—á—É –ø–æ–¥–æ—Ä–æ–∂ —É —Å–≤—ñ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö –µ–º–æ—Ü—ñ–π!\n–°–ø–µ—Ä—à—É, –¥–∞–≤–∞–π –æ–±–µ—Ä–µ–º–æ –∫—Ä–∞—ó–Ω—É, —è–∫–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å. –ü—Ä–µ–¥—Å—Ç–∞–≤ —Å–æ–±—ñ –≤–µ–ª–∏—á–Ω—ñ –≥–æ—Ä–∏ –®–≤–µ–π—Ü–∞—Ä—ñ—ó, —Å–ø–æ–∫—ñ–π–Ω—ñ –≤–æ–¥–∏ –ì–æ–ª–ª–∞–Ω–¥—ñ—ó —á–∏ –º–∞—î—Ç–Ω—ñ—Å—Ç—å —ñ—Å—Ç–æ—Ä—ñ—ó –≤ –Ü—Å–ø–∞–Ω—ñ—ó.\n–ü–æ–¥—É–º–∞–π –ø—Ä–æ —Å–≤–æ—ó –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥—á—É–π—Ç–µ –º–∞–≥—ñ—é –≤–∏–±–æ—Ä—É.',
      menu,
    );
    return;
  }

  @Action('COUNTRIES')
  async chooseCountries(@Ctx() ctx: SceneCtx) {
    const menu = Markup.inlineKeyboard(getCountriesButtons());
    await ctx.replyWithHTML('–û–±–∏—Ä–∞–π –∫—Ä–∞—ó–Ω—É?', menu);
    return;
  }

  @Action(/^COUNTRY_/)
  async chooseCountry(@Ctx() ctx: SceneCtx) {
    const answer = getAnswer(ctx.update);

    if (!answer) {
      return;
    }

    let buttons = [];

    if (answer.startsWith('COUNTRY_PAGE_')) {
      const page = Number(answer.split('COUNTRY_PAGE_')[1] || 0);
      buttons = getCountriesButtons(page);
      await ctx.editMessageReplyMarkup({ inline_keyboard: buttons });
      return;
    }

    const countryCode = answer.split('COUNTRY_')[1];
    await ctx.editMessageText('–û–±—Ä–æ–±–ª—é—é –∑–∞–ø–∏—Ç ‚öΩ ‚öΩ ‚öΩ');
    const leagues = await this.footballService.findAllLeaguesByCountry(countryCode);

    if (!leagues.length) {
      await ctx.editMessageText('–ù–∞–∂–∞–ª—å, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –∫—Ä–∞—ó–Ω—É');
      const buttons = getCountriesButtons();
      await ctx.editMessageReplyMarkup({ inline_keyboard: buttons });
      return;
    }

    ctx.scene.state = { country: countryCode, leagues };
    await ctx.editMessageText(
      `–ß—É–¥–æ–≤–æ. –¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –º–∏ –æ–±—Ä–∞–ª–∏ –∫—Ä–∞—ó–Ω—É <b>(${countryCode})</b>, —á–∞—Å –∑–∞–Ω—É—Ä–∏—Ç–∏—Å—è —É —ó—ó —Ñ—É—Ç–±–æ–ª—å–Ω—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –£—è–≤–∏ —Å–æ–±—ñ –≥—É—á–Ω—ñ —Ç—Ä–∏–±—É–Ω–∏, —è—Å–∫—Ä–∞–≤—ñ —Ñ–∞–Ω–∞—Ç—Å—å–∫—ñ —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—é –≥—Ä–∏. –ó–≤—É–∫ —Å–∏—Ä–µ–Ω —Ç–∞ –≤–∏–±—É—Ö–∏ —Ä–∞–¥–æ—â—ñ–≤ –∑–∞–ø–æ–≤–Ω—é—é—Ç—å –ø–æ–≤—ñ—Ç—Ä—è.\n<b>–©–æ —Å–∫–∞–∂–µ—à –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ üèÜ –ª—ñ–≥–∏?</b>`,
      { parse_mode: 'HTML' },
    );
    buttons = getLeagueButtons(leagues);
    if (buttons.length) {
      await ctx.editMessageReplyMarkup({ inline_keyboard: buttons });
    }
    return;
  }

  @Action(/^LEAGUE_/)
  async chooseLeague(@Ctx() ctx: SceneCtx) {
    const answer = getAnswer(ctx.update);

    if (!answer || !answer.startsWith('LEAGUE_')) {
      return;
    }
    const leagueId = Number(answer.split('LEAGUE_')[1] || 0);
    ctx.scene.state = { ...ctx.scene.state, league: leagueId };
    await ctx.editMessageText('–û–±—Ä–æ–±–ª—é—é –∑–∞–ø–∏—Ç ‚öΩ ‚öΩ ‚öΩ');
    const teams = await this.footballService.findAllTeamsByLeague(leagueId);
    ctx.scene.state = { ...ctx.scene.state, teams };

    if (!teams.length) {
      await ctx.editMessageText('üîç –ù–∞–∂–∞–ª—å, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É üèÜ –ª—ñ–≥—É');
      const { leagues } = ctx.scene.state;
      const buttons = getLeagueButtons(leagues);
      if (buttons.length) {
        await ctx.editMessageReplyMarkup({ inline_keyboard: buttons });
      }
      return;
    }

    const { country } = ctx.scene.state;

    await ctx.editMessageText(
      `–ù–∞—Ä–µ—à—Ç—ñ, –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –æ–±—Ä–∞—Ç–∏ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É, —è–∫–∞ —Å—Ç–∞–Ω–µ —Ç–≤–æ—ó–º —Ñ—É—Ç–±–æ–ª—å–Ω–∏–º –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–æ–º —É —Ü—ñ–π –∑–∞—Ö–æ–ø–ª—é—é—á—ñ–π –ø–æ–¥–æ—Ä–æ–∂—ñ. –¶–µ –º–æ–º–µ–Ω—Ç, –∫–æ–ª–∏ —Ç–∏ –≤—ñ–¥—á—É–≤–∞—î—à —Å–ø—Ä–∞–≤–∂–Ω—î —Å–ø—ñ–≤—á—É—Ç—Ç—è —Ç–∞ –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—å –¥–æ –æ–±—Ä–∞–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏. \n<b>–ß–∏ –≤–∏–±–µ—Ä–µ—à —Ç–∏ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–æ —Å–∏–ª—å–Ω—É –∫–æ–º–∞–Ω–¥—É –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é, —á–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—î—à –º–æ–ª–æ–¥—É —Ç–∞ –∞–º–±—ñ—Ü—ñ–π–Ω—É –∫–æ–º–∞–Ω–¥—É, —è–∫–∞ –ª–∏—à–µ –ø–æ—á–∏–Ω–∞—î —Å–≤—ñ–π —à–ª—è—Ö –¥–æ —Å–ª–∞–≤–∏?</b>`,
      { parse_mode: 'HTML' },
    );
    const buttons = getTeamButtons(teams);
    await ctx.editMessageReplyMarkup({
      inline_keyboard: [[Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `COUNTRY_${country}`)], ...buttons],
    });
    return;
  }

  @Action(/^TEAM_/)
  async chooseTeam(@Ctx() ctx: SceneCtx) {
    const answer = getAnswer(ctx.update);

    if (!answer || !answer.startsWith('TEAM_')) {
      return;
    }

    const teamId = Number(answer.split('TEAM_')[1] || 0);

    const { teams } = ctx.scene.state;
    const team = teams ? teams.find(({ id }) => id == teamId) : null;
    ctx.scene.state = { ...ctx.scene.state, team };

    if (team) {
      await ctx.editMessageText(
        `ü•Ö –ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!
      \n <b>${team.name}</b> (${team.country})
      \n –ö–ª—É–± –∑–∞—Å–Ω–æ–≤–∞–Ω–∏–π: ${team.founded}`,
        { parse_mode: 'HTML' },
      );
      const { league } = ctx.scene.state;
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ üèÜ', `LEAGUE_${league}`)],
          [Markup.button.callback('–î–æ –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω', 'COUNTRIES')],
          [Markup.button.callback('–ó–±–µ—Ä–µ–≥—Ç–∏', 'SAVE_TEAM')],
        ],
      });
    }
  }

  @Action('SAVE_TEAM')
  async saveChoose(@Ctx() ctx: SceneCtx) {
    const userId = getUserId(ctx);
    const { team, league } = ctx.scene.state;

    if (!team || !userId) return;

    try {
      await this.repository.insert({
        userId,
        name: team.name,
        countryCode: team.country,
        id: team.id,
      });
    } catch (err) {
      this.logger.error('Team save error:', error);
      await ctx.editMessageText(
        `–ö–æ–º–∞–Ω–¥–∞ <b>${team.name}</b> –≤–∂–µ –¥–æ–¥–∞–Ω–∞.\n–í—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–∞ –ø–æ–±–∞—á–∏—Ç–∏ –≤ –º–µ–Ω—é "–£–ª—é–±–ª–µ–Ω—ñ"`,
        { parse_mode: 'HTML' },
      );
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `LEAGUE_${league}`)],
          [Markup.button.callback('–î–æ –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω', 'COUNTRIES')],
          [Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö', 'TO_FAVORITE')],
        ],
      });
      return;
    }

    await ctx.editMessageText(`<b>${team.name}</b> –¥–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö`, { parse_mode: 'HTML' });
    await ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `LEAGUE_${league}`)],
        [Markup.button.callback('–î–æ –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω', 'COUNTRIES')],
        [Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö', 'TO_FAVORITE')],
      ],
    });
  }

  @Action('TO_FAVORITE')
  async goToFavorite(@Ctx() ctx: SceneCtx) {
    await ctx.scene.enter(EScenes.FAVORITE);
  }
}
