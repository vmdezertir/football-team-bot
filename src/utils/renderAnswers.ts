import { Message } from 'telegraf/typings/core/types/typegram';

import { Scenes } from '@app/@types/custom';

export type TErrorType = 'db' | 'api' | 'notFound';

export const renderError = async (
  ctx: Scenes.SContext<{}>,
  errorType?: TErrorType,
  message?: string,
): Promise<Message.TextMessage> => {
  let text = message || '';
  switch (errorType) {
    case 'db': {
      text = `ü§öüèªüü• <b>–£–ø—Å. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫</b>\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –±–æ—Ç–∞ –∫–æ–º–º–∞–Ω–¥–æ—é <code>/restart</code>`;
      break;
    }
    case 'api': {
      text = 'üêû <b>–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ</b> ‚è≥';
      break;
    }
    case 'notFound': {
      text = message || 'ü§∑‚Äç‚ôÇÔ∏è –ù–∞–∂–∞–ª—å, –Ω—ñ—Ü –Ω–µ –∑–Ω–∞–π—à–æ–≤';
      break;
    }
  }

  const msg = await ctx.replyWithHTML(text);
  ctx.session.errMsgId = msg.message_id;
  return msg;
};
